(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{132:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(156)),i={title:"<Select /> ( Default Export )",summary:"Select dropdown without a Label or Feedback"},l={unversionedId:"form/select/components/select",id:"form/select/components/select",isDocsHomePage:!1,title:"<Select /> ( Default Export )",description:"Example",source:"@site/docs/form/select/components/select.md",slug:"/form/select/components/select",permalink:"/form/select/components/select",editUrl:"https://github.com/avaiity/availity-react/edit/master/docs/form/select/components/select.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/form/select/index"},next:{title:"<SelectField />",permalink:"/form/select/components/select-field"}},c=[{value:"Example",id:"example",children:[]},{value:"Props",id:"props",children:[{value:"<code>name: string</code>",id:"name-string",children:[]},{value:"<code>raw?: boolean</code>",id:"raw-boolean",children:[]},{value:"<code>valueKey?: string</code>",id:"valuekey-string",children:[]},{value:"<code>labelKey?: string</code>",id:"labelkey-string",children:[]},{value:"<code>maxLength?: number</code>",id:"maxlength-number",children:[]},{value:"<code>selectRef?: Ref</code>",id:"selectref-ref",children:[]},{value:"<code>createable?: boolean</code>",id:"createable-boolean",children:[]},{value:"<code>autofill?: boolean | AutoFillType</code>",id:"autofill-boolean--autofilltype",children:[]}]}],p={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"viewCode=true",viewCode:"true"}),"import { Form } from '@availity/form';\nimport Select, { SelectField } from '@availity/select';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\n<Form\n  initialValues={{\n    justTheInput: undefined,\n  }}\n  onSubmit={values => window.alert(JSON.stringify(values))}\n  validationSchema={yup.object().shape({\n    justTheInput: yup.string().required('This field is required.'),\n  })}\n>\n  <Select\n    id=\"justTheInput\"\n    name=\"justTheInput\"\n    isMulti={false}\n    options={[\n      { label: 'Option 1', value: 1 },\n      { label: 'Option 2', value: 2 },\n      { label: 'Option 3', value: 3 },\n    ]}\n  />\n\n  <Button className=\"mt-3\" color=\"primary\" type=\"submit\">\n    Submit\n  </Button>\n</Form>;\n")),Object(o.b)("h2",{id:"props"},"Props"),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/JedWatson/react-select"}),"react-select")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/vtaits/react-select-async-paginate"}),"react-select-async-paginate")," for additional props."),Object(o.b)("h3",{id:"name-string"},Object(o.b)("inlineCode",{parentName:"h3"},"name: string")),Object(o.b)("p",null,"The name of the field. Will be the key of the selected option(s) that come through in the values of the ",Object(o.b)("inlineCode",{parentName:"p"},"onSubmit")," callback of the form."),Object(o.b)("h3",{id:"raw-boolean"},Object(o.b)("inlineCode",{parentName:"h3"},"raw?: boolean")),Object(o.b)("p",null,"If ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", the entire object of the selected value is returned as the value instead of the value for the ",Object(o.b)("inlineCode",{parentName:"p"},"valueKey")," within the object."),Object(o.b)("h3",{id:"valuekey-string"},Object(o.b)("inlineCode",{parentName:"h3"},"valueKey?: string")),Object(o.b)("p",null,"The key of the value to return when selected. ",Object(o.b)("strong",{parentName:"p"},"Default:")," ",Object(o.b)("inlineCode",{parentName:"p"},'"value"')),Object(o.b)("h3",{id:"labelkey-string"},Object(o.b)("inlineCode",{parentName:"h3"},"labelKey?: string")),Object(o.b)("p",null,"The key of the label to render in the dropdown for the user to see. ",Object(o.b)("strong",{parentName:"p"},"Default:")," ",Object(o.b)("inlineCode",{parentName:"p"},'"label"')),Object(o.b)("h3",{id:"maxlength-number"},Object(o.b)("inlineCode",{parentName:"h3"},"maxLength?: number")),Object(o.b)("p",null,"The maximum number of options that can be selected ( when ",Object(o.b)("inlineCode",{parentName:"p"},"isMulti")," is ",Object(o.b)("inlineCode",{parentName:"p"},"true"),")"),Object(o.b)("h3",{id:"selectref-ref"},Object(o.b)("inlineCode",{parentName:"h3"},"selectRef?: Ref")),Object(o.b)("p",null,"Ref passed to ",Object(o.b)("inlineCode",{parentName:"p"},"react-select-async-paginate")," component if in async mode."),Object(o.b)("h3",{id:"createable-boolean"},Object(o.b)("inlineCode",{parentName:"h3"},"createable?: boolean")),Object(o.b)("p",null,"Allow new items to be created if not found. ",Object(o.b)("strong",{parentName:"p"},"Default:")," ",Object(o.b)("inlineCode",{parentName:"p"},"false"),"."),Object(o.b)("h3",{id:"autofill-boolean--autofilltype"},Object(o.b)("inlineCode",{parentName:"h3"},"autofill?: boolean | AutoFillType")),Object(o.b)("p",null,"If ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", when the value of the dropdown changes, if the ",Object(o.b)("inlineCode",{parentName:"p"},"isMulti")," prop is ",Object(o.b)("inlineCode",{parentName:"p"},"false")," ",Object(o.b)("em",{parentName:"p"},"and")," the new value of the dropdown is an object, all fields on the form corresponding to the new value are auto-filled. In order for a field to be auto-filled, the ",Object(o.b)("inlineCode",{parentName:"p"},"name")," property on the field ",Object(o.b)("em",{parentName:"p"},"must")," match the key inside the new value."),Object(o.b)("p",null,"For example, if the new value is ",Object(o.b)("inlineCode",{parentName:"p"},'{ "payer": "Availity" }'),', in order for the payer input in the form to be auto-filled to "Availity", the ',Object(o.b)("inlineCode",{parentName:"p"},"name"),' prop on the input must be "payer".'),Object(o.b)("p",null,"If ",Object(o.b)("inlineCode",{parentName:"p"},"autofill")," is an object, when the value of the dropdown changes, if the ",Object(o.b)("inlineCode",{parentName:"p"},"isMulti")," prop is ",Object(o.b)("inlineCode",{parentName:"p"},"false")," ",Object(o.b)("em",{parentName:"p"},"and")," the new value of the dropdown is an object, all fields on the form corresponding to the keys in the ",Object(o.b)("inlineCode",{parentName:"p"},"autofill")," prop will be auto-filled."),Object(o.b)("p",null,"When ",Object(o.b)("inlineCode",{parentName:"p"},"autofill")," is an object, the values in the object can be a string or a function. When a string, the key in the ",Object(o.b)("inlineCode",{parentName:"p"},"autofill")," prop gets auto-filled to that path on the selected option. When a function, it gets called with the selected option, and the key in the ",Object(o.b)("inlineCode",{parentName:"p"},"autofill")," prop gets auto-filled to the return value of the function."),Object(o.b)("p",null,"For example, if the new value is ",Object(o.b)("inlineCode",{parentName:"p"},'{ "payer": { "name": "Availity", "id": "1" } }'),', in order for the "payerName", "payerId", and "payerNameAndId" inputs to be auto-filled to "Availity", "1", and "1 - Availity" respectively, the ',Object(o.b)("inlineCode",{parentName:"p"},"autofill")," prop should be:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  payerName: 'payer.name',\n  payerId: 'payer.id',\n  payerNameAndId: opt => `${opt.payer.id} - ${opt.payer.name}`,\n}\n")))}b.isMDXComponent=!0},156:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=b(n),s=a,m=u["".concat(i,".").concat(s)]||u[s]||d[s]||o;return n?r.a.createElement(m,l(l({ref:t},p),{},{components:n})):r.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);