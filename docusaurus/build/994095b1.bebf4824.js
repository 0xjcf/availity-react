(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{117:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return p}));var a=n(2),l=n(6),r=(n(0),n(156)),i={title:"<Upload /> ( Default Export )"},o={unversionedId:"form/upload/upload",id:"form/upload/upload",isDocsHomePage:!1,title:"<Upload /> ( Default Export )",description:"The default export is an all-in-one solution which handles uploads, encrypted file password requests and file state management for you.",source:"@site/docs/form/upload/upload.md",slug:"/form/upload/upload",permalink:"/form/upload/upload",editUrl:"https://github.com/avaiity/availity-react/edit/master/docs/form/upload/upload.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/form/upload/index"},next:{title:"<FilePicker />",permalink:"/form/upload/file-picker"}},d=[{value:"Example",id:"example",children:[]},{value:"Props",id:"props",children:[{value:"<code>name: string</code>",id:"name-string",children:[]},{value:"<code>btnText?: ReactNode</code>",id:"btntext-reactnode",children:[]},{value:"<code>bucketId: string</code>",id:"bucketid-string",children:[]},{value:"<code>customerId: string</code>",id:"customerid-string",children:[]},{value:"<code>clientId: string</code>",id:"clientid-string",children:[]},{value:"<code>allowedFileNameCharacters?: string</code>",id:"allowedfilenamecharacters-string",children:[]},{value:"<code>allowedFileTypes?: Array&lt;string&gt;</code>",id:"allowedfiletypes-arraystring",children:[]},{value:"<code>onFileUpload?: (upload: UploadCore) =&gt; void</code>",id:"onfileupload-upload-uploadcore--void",children:[]},{value:"<code>onFileRemove?: (files: Array&lt;File&gt;, fileId: String) =&gt; void</code>",id:"onfileremove-files-arrayfile-fileid-string--void",children:[]},{value:"<code>maxSize?: number</code>",id:"maxsize-number",children:[]},{value:"<code>max?: number</code>",id:"max-number",children:[]},{value:"<code>multiple?: boolean</code>",id:"multiple-boolean",children:[]},{value:"<code>disabled?: boolean</code>",id:"disabled-boolean",children:[]},{value:"<code>showFileDrop?: boolean</code>",id:"showfiledrop-boolean",children:[]},{value:"<code>getDropRejectionMessage?: (errors: Array&lt;FileError&gt;, file: File) =&gt; String</code>",id:"getdroprejectionmessage-errors-arrayfileerror-file-file--string",children:[]}]},{value:"Example",id:"example-1",children:[{value:"Callback Function Usage",id:"callback-function-usage",children:[]}]}],c={rightToc:d};function p(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The default export is an all-in-one solution which handles uploads, encrypted file password requests and file state management for you."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'import React from \'react\';\nimport Upload from \'@availity/form-upload\';\nimport { Form } from \'@availity/form\';\n\n<Form initialValues={{ myFile: undefined }}>\n  <Upload name="myFile" clientId="a" bucketId="b" customerId="c" />;\n</Form>\n')),Object(r.b)("h2",{id:"props"},"Props"),Object(r.b)("h3",{id:"name-string"},Object(r.b)("inlineCode",{parentName:"h3"},"name: string")),Object(r.b)("p",null,"Identifies the field and matches the validation schema."),Object(r.b)("h3",{id:"btntext-reactnode"},Object(r.b)("inlineCode",{parentName:"h3"},"btnText?: ReactNode")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"+ Add File")," for initial file or ",Object(r.b)("inlineCode",{parentName:"p"},"+ Add Another File Attachment")," if an attachment already have been selected. | The text that appears on the button."),Object(r.b)("h3",{id:"bucketid-string"},Object(r.b)("inlineCode",{parentName:"h3"},"bucketId: string")),Object(r.b)("p",null,"The ID of the bucket you want to upload to."),Object(r.b)("h3",{id:"customerid-string"},Object(r.b)("inlineCode",{parentName:"h3"},"customerId: string")),Object(r.b)("p",null,"The customer ID for the organization the user is uploading on behalf of."),Object(r.b)("h3",{id:"clientid-string"},Object(r.b)("inlineCode",{parentName:"h3"},"clientId: string")),Object(r.b)("p",null,"The ID obtained from APIConnect. Must be subscribed to the resumeable uploads API."),Object(r.b)("h3",{id:"allowedfilenamecharacters-string"},Object(r.b)("inlineCode",{parentName:"h3"},"allowedFileNameCharacters?: string")),Object(r.b)("p",null,"Restrict the file name characters to a regex set."),Object(r.b)("h3",{id:"allowedfiletypes-arraystring"},Object(r.b)("inlineCode",{parentName:"h3"},"allowedFileTypes?: Array<string>")),Object(r.b)("p",null,"Restrict the file types allowed to be uploaded to. eg: ",Object(r.b)("inlineCode",{parentName:"p"},"['.jpeg', '.jpg']"),"."),Object(r.b)("h3",{id:"onfileupload-upload-uploadcore--void"},Object(r.b)("inlineCode",{parentName:"h3"},"onFileUpload?: (upload: UploadCore) => void")),Object(r.b)("p",null,"Callback called when file is uploaded. The callback is provided the ",Object(r.b)("inlineCode",{parentName:"p"},"Upload")," instance from upload-core SDK. Use this callback to track which files have been uploaded (to get references returned by the API)."),Object(r.b)("h3",{id:"onfileremove-files-arrayfile-fileid-string--void"},Object(r.b)("inlineCode",{parentName:"h3"},"onFileRemove?: (files: Array<File>, fileId: String) => void")),Object(r.b)("p",null,"Callback called when file is removed. The callback is provided two arguments. 1. the updated files and 2. the id of the file that was removed"),Object(r.b)("h3",{id:"maxsize-number"},Object(r.b)("inlineCode",{parentName:"h3"},"maxSize?: number")),Object(r.b)("p",null,"The maximum file size (in bytes) for a file to be uploaded."),Object(r.b)("h3",{id:"max-number"},Object(r.b)("inlineCode",{parentName:"h3"},"max?: number")),Object(r.b)("p",null,"The maximum number of files allowed to be uploaded. ",Object(r.b)("inlineCode",{parentName:"p"},"0")," (or a falsey value) means unlimited. When the max number has been reached, the add button will disappear."),Object(r.b)("h3",{id:"multiple-boolean"},Object(r.b)("inlineCode",{parentName:"h3"},"multiple?: boolean")),Object(r.b)("p",null,"Indicates that the user will be allowed to select multiple files when selecting files from the OS prompt. ",Object(r.b)("strong",{parentName:"p"},"Default:")," ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"."),Object(r.b)("h3",{id:"disabled-boolean"},Object(r.b)("inlineCode",{parentName:"h3"},"disabled?: boolean")),Object(r.b)("p",null,"Disable the file input ",Object(r.b)("strong",{parentName:"p"},"Default:")," ",Object(r.b)("inlineCode",{parentName:"p"},"false"),"."),Object(r.b)("h3",{id:"showfiledrop-boolean"},Object(r.b)("inlineCode",{parentName:"h3"},"showFileDrop?: boolean")),Object(r.b)("p",null,"Set as true to show a drag and drop file upload option instead of a button (file explorer still available on click)."),Object(r.b)("h3",{id:"getdroprejectionmessage-errors-arrayfileerror-file-file--string"},Object(r.b)("inlineCode",{parentName:"h3"},"getDropRejectionMessage?: (errors: Array<FileError>, file: File) => String")),Object(r.b)("p",null,"Override the default error message for files rejected when ",Object(r.b)("inlineCode",{parentName:"p"},"showFileDrop")," is ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"."),Object(r.b)("h2",{id:"example-1"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'import React from \'react\';\nimport { Form } from \'@availity/form\';\nimport Upload from \'@availity/form-upload\';\n\n<Form initialValues={{ myFile: undefined }}>\n  <Upload\n    name="myFile"\n    btnText="Upload a claim"\n    clientId="a"\n    bucketId="b"\n    customerId="c"\n    multiple={false}\n    max={1}\n  />\n</Form>\n')),Object(r.b)("h3",{id:"callback-function-usage"},"Callback Function Usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Form initialValues={{ myFile: undefined }}>\n  <Upload\n    name="myFile"\n    btnText="Upload a claim"\n    clientId="a"\n    bucketId="b"\n    customerId="c"\n    onFileUpload={onUpload} // <-- add file callback function\n    onFileRemove={onRemove} // <-- remove file callback function\n    max={1}\n  />\n</Form>\n\n// onUpload callback definition\nonUpload(upload) {\n    if (upload) {\n      upload.onSuccess.push(async () => {\n        // success action\n      });\n      upload.onError.push(() => {\n        // error action\n      });\n    }\n  }\n// ...\n\n// onRemove callback definition\nonRemove(file) {\n  // remove action\n}\n')))}p.isMDXComponent=!0},156:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),l=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=l.a.createContext({}),p=function(e){var t=l.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},s=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),b=p(n),s=a,m=b["".concat(i,".").concat(s)]||b[s]||u[s]||r;return n?l.a.createElement(m,o(o({ref:t},c),{},{components:n})):l.a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);